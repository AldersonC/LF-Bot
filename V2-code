// generated by mBlock5 for mBot Ranger
// codes make you happy

#include <Arduino.h>
#include <Wire.h>
#include <SoftwareSerial.h>
#include <MeAuriga.h>

MeLightSensor lightsensor_12(12);
MeUltrasonicSensor ultrasonic_6(6);
MeRGBLed rgbled_0(0, 12);
MeBuzzer buzzer;

float Power_Max = 0;
float White = 0;
float Black = 0;
float ObsTurn = 0;
float Kp = 0;
float a = 0;
float b = 0;
float c = 0;
float d = 0;
float e = 0;
float up = 0;
float down = 0;
float err = 0;
float LineTurn = 0;
float Power = 0;
float Power_Min = 0;
float a_min = 0;
float b_min = 0;
float c_min = 0;
float d_min = 0;
float e_min = 0;
float a_cal = 0;
float b_cal = 0;
float c_cal = 0;
float d_cal = 0;
float e_cal = 0;
float cp_light = 0;

MeEncoderOnBoard Encoder_1(SLOT1);
MeEncoderOnBoard Encoder_2(SLOT2);
void isr_process_encoder1(void)
{
  if(digitalRead(Encoder_1.getPortB()) == 0){
    Encoder_1.pulsePosMinus();
  }else{
    Encoder_1.pulsePosPlus();
  }
}
void isr_process_encoder2(void)
{
  if(digitalRead(Encoder_2.getPortB()) == 0){
    Encoder_2.pulsePosMinus();
  }else{
    Encoder_2.pulsePosPlus();
  }
}
void move(int direction, int speed)
{
  int leftSpeed = 0;
  int rightSpeed = 0;
  if(direction == 1){
    leftSpeed = -speed;
    rightSpeed = speed;
  }else if(direction == 2){
    leftSpeed = speed;
    rightSpeed = -speed;
  }else if(direction == 3){
    leftSpeed = -speed;
    rightSpeed = -speed;
  }else if(direction == 4){
    leftSpeed = speed;
    rightSpeed = speed;
  }
  Encoder_1.setMotorPwm(leftSpeed);
  Encoder_2.setMotorPwm(rightSpeed);
}
void ma_da_kong_zhi__N_N_cn(double L, double R){
    Encoder_1.setMotorPwm(-1 * L/100.0*255);
    Encoder_2.setMotorPwm(1 * R/100.0*255);

}
void du_qu_gan_ce_qi_cn(){
    a = floor(((analogRead(A0 + 6) - a_min)) * a_cal);
    b = floor(((analogRead(A0 + 12) - b_min)) * b_cal);
    c = floor(((analogRead(A0 + 7) - c_min)) * c_cal);
    d = floor(((analogRead(A0 + 13) - d_min)) * d_cal);
    e = floor(((analogRead(A0 + 8) - e_min)) * e_cal);
    up = (-20 * a + (-10 * b + (10 * d + 20 * e)));
    down = (a + (b + (c + (d + e))));
    err = (Kp * (up / down)) * abs(Power / 60);

}
void chang_di_guang_zhi_xiao_zheng_cn(){

    rgbled_0.setColor(3,128,0,0);
    rgbled_0.show();
    while(!(ultrasonic_6.distanceCm() < 10))
    {
      _loop();

      buzzer.tone(700, 0.1 * 1000);
      _delay(0.8);

    }
    while(!(ultrasonic_6.distanceCm() > 40))
    {
      _loop();
    }

    buzzer.tone(1200, 0.3 * 1000);
    a_min = analogRead(A0 + 6);
    b_min = analogRead(A0 + 12);
    c_min = analogRead(A0 + 7);
    d_min = analogRead(A0 + 13);
    e_min = analogRead(A0 + 8);

    rgbled_0.setColor(3,0,32,128);
    rgbled_0.show();
    while(!(ultrasonic_6.distanceCm() < 10))
    {
      _loop();
    }
    while(!(ultrasonic_6.distanceCm() > 40))
    {
      _loop();
    }

    rgbled_0.setColor(3,100,0,128);
    rgbled_0.show();

    buzzer.tone(700, 0.3 * 1000);
    a_cal = 100 / ((analogRead(A0 + 6) - a_min));
    b_cal = 100 / ((analogRead(A0 + 12) - b_min));
    c_cal = 100 / ((analogRead(A0 + 7) - c_min));
    d_cal = 100 / ((analogRead(A0 + 13) - d_min));
    e_cal = 100 / ((analogRead(A0 + 8) - e_min));

    rgbled_0.setColor(3,16,128,0);
    rgbled_0.show();

    buzzer.tone(1200, 0.3 * 1000);

    buzzer.tone(1500, 0.1 * 1000);

}
void she_ding_chu_shi_zhi_cn(){
    Kp = 6;
    Power_Max = 30;
    Power_Min = 10;
    White = 20;
    Black = 85;
    Power = 20;
    cp_light = 1;

}
void smolbump(){
    du_qu_gan_ce_qi_cn();
    while(!((a > 50)  &&  ((b > 50)  &&  ((c > 50)  &&  ((d > 50)  &&  (e > 50))))))
    {
      _loop();
      ma_da_kong_zhi__N_N_cn((Power + err), (Power - err));
      du_qu_gan_ce_qi_cn();

    }
    ma_da_kong_zhi__N_N_cn(5, 35);
    _delay(0.2);
    du_qu_gan_ce_qi_cn();
    while((a > 50)  &&  ((b > 50)  &&  ((c > 50)  &&  ((d > 50)  &&  (e > 50))))){
      ma_da_kong_zhi__N_N_cn(5, 35);
      du_qu_gan_ce_qi_cn();

    }

}
void turnR(){
    du_qu_gan_ce_qi_cn();
    while(!((a > 50)  &&  ((b > 50)  &&  ((c > 50)  &&  ((d > 50)  &&  (e > 50))))))
    {
      _loop();
      ma_da_kong_zhi__N_N_cn((Power + err), (Power - err));
      du_qu_gan_ce_qi_cn();

    }
    ma_da_kong_zhi__N_N_cn(-28, 30);
    _delay(0.2);
    du_qu_gan_ce_qi_cn();
    while((a > 50)  &&  ((b > 50)  &&  ((c > 50)  &&  ((d > 50)  &&  (e > 50))))){
      ma_da_kong_zhi__N_N_cn(-28, 30);
      du_qu_gan_ce_qi_cn();

    }

}
void su_kong_bi_li_xun_xian_cn(){
    du_qu_gan_ce_qi_cn();
    su_du_kong_zhi_cn();
    ma_da_kong_zhi__N_N_cn((Power + err), (Power - err));

}
void lights(){

    rgbled_0.setColor(cp_light,125,0,0);
    rgbled_0.show();
    cp_light += 1;

}
void ckeck_points(){
    _delay(0);

}
void su_du_kong_zhi_cn(){
    if(abs(err) < 10){
      if(Power < Power_Max){
        Power += 0.5;

      }

    }else{
      if(Power > Power_Min){
        Power += -5;

      }

    }

}
void turnL(){
    du_qu_gan_ce_qi_cn();
    while(!((a > 50)  &&  ((b > 50)  &&  ((c > 50)  &&  ((d > 50)  &&  (e > 50))))))
    {
      _loop();
      ma_da_kong_zhi__N_N_cn((Power + err), (Power - err));
      du_qu_gan_ce_qi_cn();

    }
    ma_da_kong_zhi__N_N_cn(30, -28);
    _delay(0.2);
    du_qu_gan_ce_qi_cn();
    while((a > 50)  &&  ((b > 50)  &&  ((c > 50)  &&  ((d > 50)  &&  (e > 50))))){
      ma_da_kong_zhi__N_N_cn(30, -28);
      du_qu_gan_ce_qi_cn();

    }

}
void L2(){
    du_qu_gan_ce_qi_cn();
    while(!((a > 50)  &&  ((b > 50)  &&  ((c > 50)  &&  ((d > 50)  &&  (e > 50))))))
    {
      _loop();
      ma_da_kong_zhi__N_N_cn((Power + err), (Power - err));
      du_qu_gan_ce_qi_cn();

    }
    ma_da_kong_zhi__N_N_cn(28, -25);
    _delay(0.2);
    du_qu_gan_ce_qi_cn();
    while((a > 50)  &&  ((b > 50)  &&  ((c > 50)  &&  ((d > 50)  &&  (e > 50))))){
      ma_da_kong_zhi__N_N_cn(28, -25);
      du_qu_gan_ce_qi_cn();

    }

}
void tinystraight(){
    du_qu_gan_ce_qi_cn();
    for(int count=0;count<1000;count++){
      ma_da_kong_zhi__N_N_cn((Power + err), (Power - err));
      du_qu_gan_ce_qi_cn();

      rgbled_0.setColor(0,255,0,0);
      rgbled_0.show();
      _delay(1);
      rgbled_0.setColor(0,0,0,0);
      rgbled_0.show();
    }

}
void Vturn4(){
    du_qu_gan_ce_qi_cn();
    while(!((a > 50)  &&  ((b > 50)  &&  ((c > 50)  &&  ((d > 50)  &&  (e > 50))))))
    {
      _loop();
      ma_da_kong_zhi__N_N_cn((Power + err), (Power - err));
      du_qu_gan_ce_qi_cn();

    }
    while((a > 50)  &&  ((b > 50)  &&  ((c > 50)  &&  ((d > 50)  &&  (e > 50))))){
      ma_da_kong_zhi__N_N_cn(35, 30);
      du_qu_gan_ce_qi_cn();

    }
    ckeck_points();
    for(int count2=0;count2<1000;count2++){
      ma_da_kong_zhi__N_N_cn((Power + err), (Power - err));
      du_qu_gan_ce_qi_cn();
    }

}

void _delay(float seconds) {
  if(seconds < 0.0){
    seconds = 0.0;
  }
  long endTime = millis() + seconds * 1000;
  while(millis() < endTime) _loop();
}

void setup() {
  randomSeed((unsigned long)(lightsensor_12.read() * 123456));
  rgbled_0.setpin(44);
  rgbled_0.fillPixelsBak(0, 2, 1);
  buzzer.setpin(45);
  TCCR1A = _BV(WGM10);
  TCCR1B = _BV(CS11) | _BV(WGM12);
  TCCR2A = _BV(WGM21) | _BV(WGM20);
  TCCR2B = _BV(CS21);
  attachInterrupt(Encoder_1.getIntNum(), isr_process_encoder1, RISING);
  attachInterrupt(Encoder_2.getIntNum(), isr_process_encoder2, RISING);
  pinMode(A0 + 6,INPUT);
  pinMode(A0 + 12,INPUT);
  pinMode(A0 + 7,INPUT);
  pinMode(A0 + 13,INPUT);
  pinMode(A0 + 8,INPUT);
  chang_di_guang_zhi_xiao_zheng_cn();
  while(!(ultrasonic_6.distanceCm() < 10))
  {
    _loop();
  }

  rgbled_0.setColor(0,0,21,21);
  rgbled_0.show();
  _delay(1);
  rgbled_0.setColor(0,0,0,0);
  rgbled_0.show();
  she_ding_chu_shi_zhi_cn();
  while(!(ultrasonic_6.distanceCm() > 40))
  {
    _loop();
  }

  buzzer.tone(1200, 0.5 * 1000);
  du_qu_gan_ce_qi_cn();
  turnR();

  rgbled_0.setColor(3,0,221,255);
  rgbled_0.show();

  rgbled_0.setColor(4,0,255,250);
  rgbled_0.show();
  ma_da_kong_zhi__N_N_cn(0, 0);
  _delay(0.4);
  turnL();

  rgbled_0.setColor(5,0,246,255);
  rgbled_0.show();

  rgbled_0.setColor(6,0,255,250);
  rgbled_0.show();
  ma_da_kong_zhi__N_N_cn(0, 0);
  _delay(0.4);
  turnR();

  rgbled_0.setColor(7,0,255,250);
  rgbled_0.show();

  rgbled_0.setColor(8,0,255,250);
  rgbled_0.show();
  ma_da_kong_zhi__N_N_cn(0, 0);
  _delay(0.4);
  L2();

  rgbled_0.setColor(9,0,233,255);
  rgbled_0.show();

  rgbled_0.setColor(10,0,255,250);
  rgbled_0.show();
  ma_da_kong_zhi__N_N_cn(0, 0);
  _delay(0.4);

  rgbled_0.setColor(11,0,255,225);
  rgbled_0.show();

  rgbled_0.setColor(12,0,255,250);
  rgbled_0.show();
  turnR();

  rgbled_0.setColor(1,0,246,255);
  rgbled_0.show();

  rgbled_0.setColor(2,0,255,250);
  rgbled_0.show();
  ma_da_kong_zhi__N_N_cn(0, 0);
  _delay(0.4);
  turnL();

  rgbled_0.setColor(0,0,255,21);
  rgbled_0.show();
  ma_da_kong_zhi__N_N_cn(0, 0);
  _delay(0.4);
  while(1) {
      ma_da_kong_zhi__N_N_cn((Power + err), (Power - err));
      du_qu_gan_ce_qi_cn();

      _loop();
  }

}

void _loop() {
  Encoder_1.loop();
  Encoder_2.loop();
}

void loop() {
  _loop();
}
